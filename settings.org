#+TITLE: Djole's Emacs Config
#+AUTHOR: Djordje Knezevic
#+EMAIL: djolereject@gmail.com
#+PROPERTY: header-args :results silent :tangle (expand-file-name "settings.el" config-dir)

* Intro
Last Emacs bankruptcy forced me to try a different route - put everything in org file and have it documented, explained and never stale. This decision still looks decent, because I consulted README in first few days after installing packages, so I can only imagine that future will bring more of that need.

This file (settings.org) is called from init.el by [[https://org-babel.readthedocs.io/en/latest/][Babel]] which represents [[https://orgmode.org/][Org-Mode]]'s capability to export, compile and execute code extracted from org files. All this setup is there to emulate old paradigm of [[https://github.com/limist/literate-programming-examples][Literate Programming]], which might have it's flaws but lisp config file should be exactly where it shines. I will try not to underestimate "Literate" part of this concept and give thorough explanations for every line of code along with overall principles for bigger sections.
** Files in .emacs.d
*** settings.org
This is where the magic happens... Installations, setup and creation of values is done in this file. After Babel extracts code from it, it goes in `config/settings.el` from where it's loaded. `Custom` creates another file in `config` with package installations which makes all of needed configuration for this setup.
- Source of all packages is melpa-stable, which might not be enough for somebody who wants newest and shiniest toys. You can replace package source with [[https://melpa.org/packages][MELPA]] or [[http://marmalade-repo.org/packages/][Marmelade]], just be aware that they both have their problems and don't rely 100% on having the source available. It's case to case problem and everything relies on your needs, but [[https://stable.melpa.org/packages/][Melpa Stable]] should suffice to most. 
- Installation is done via [[https://github.com/jwiegley/use-package][use-package]], which at this time looks superior to all other techniques and I tried them all. Possibility to install, require and define everything in one place is something I was hoping for for a long time and `use-package` delivered. Some packages might make you jump through hoops if you try to install them this way, but it's worth it.
*** init.el
In `init` we have to set some things beforehand so `settings` can run consistently between reboots and there is no clutter created in directory.
- `(package-initialize)` is there just because `Custom` would put it there anyway being the starting file of config.
- `config-dir` and `data-dir` are names of directories that we want for variables and they are explained in more detail in `no-littering` package explanation. When I included this package, it became obvious that some other transient files should have their place in those directories so I pulled their creation from `no-littering` and put it in preprocessing stage.
*** reset.sh
This is just a small script that I use to clean everything from this directory except initial files. I use it for shorthand to recreate starting structure of `.emacs.d` when I want to try out different installations. It's made to work with any *nix system, being that it's based on POSIX, but I didn't test that statement vigorously. After directory is put under version control, this file doesn't make any sense, but I keep it just in case.
*** README
Just a link to `settings.org`
* Prerequisites
Before we go on with installing packages it's essential to setup some prerequisites. Everything in this section concerns initializing `set-package` and making sure we don't create clutter around with default settings.
** Sources
Packages are pulled from melpa stable, be conservative about adding other repos. Having only one repo keeps things simple and neat, and I mostly don't need fancy, rare or bleeding edge packages. If that need arises, I can always download it locally and set source to `use-package`.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** TLS Setup
Before installing anything it's essential to setup TLS certificate, because Emacs is not handling that as it should. We can't use `use-package` for this purpose because it's managed before *ANY* installation, including `use-package`.
For openssl to work, on OSX we need to install `libressl`, which is easiest to do via Homebrew: `brew install libressl`, other systems may need some other setup or even none (which I believe goes for any popular distro).

#+BEGIN_SRC emacs-lisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC

** Install `use-package`
I stated everything I think of `use-package` in Intro, so get on with it. For you with different preferences about your packages, bear in mind that every piece of code that uses it probably can be replaced with said alternative. I believe this setup could be copied with some other macro, but I haven't tried it.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+END_SRC
** Install `no-littering`
[[https://github.com/emacscollective/no-littering][no-littering]] package is the first we are going to install. It's job is to make subdirectories in user's .emacs directory, and save all tmp files there. This reduces clutter and helps with having one place to look in case of something missing.
- `config` dir is for autogenerated files that would end up cluttering init.el. settings.el and custom.el are created on start, but any package that needes configuration files should use this directory to save them.
- `data` serves as temporary directory for all packages. Emacs's `auto-save` and `backup` are placed there, along with any other package that needs to save some transient data.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :init (progn
            (setq no-littering-etc-directory config-dir)
            (setq no-littering-var-directory data-dir)
            :config (progn
                      (require 'no-littering)
                      (require 'recentf)
                      (add-to-list 'recentf-exclude no-littering-var-directory)
                      (add-to-list 'recentf-exclude no-littering-etc-directory)
                      (setq backup-directory-alist
                            `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
                      (setq auto-save-file-name-transforms
                            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
                      (setq custom-file (expand-file-name "custom.el" config-dir))
                      (when (file-exists-p custom-file)
                        (load custom-file)))))

#+END_SRC
** Supress warnings
Some packages are sending unnecessary warnings and it's bothering me so this is just for my OCD. Default value for this variable is :warning and I set it up to :error.
#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :error)
#+END_SRC
* Basic Layout
** Set general defaults
*** Maximize Emacs
I want my GUI app to take as much real estate as possible
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC
*** Set Cursor
Cursor is set to be 'bar (other options include: 'box, 'hollow, 'hbar, nil). This is purely personal preference.
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC
*** Starting mode
I'm often opening various files from Finder with Emacs, and in most cases `text-mode` seems to be the best fit if file extension is unknown.
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'text-mode)
#+END_SRC
** Remove unnecessary things
*** Decorations
If you use your Emacs without mouse, toolbar and scrollbar are just wastes of screen space.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+END_SRC
*** Messages
While these screens might be helpful for beginners when they start to play with Emacs, after a while they become annoyances.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
#+END_SRC
*** Yes/No
Show y/n instead of yes/no (this really ought to be default)
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Tooltips
I never need GUI tooltips in Emacs and can't imagine type of usage that welcomes it
#+BEGIN_SRC emacs-lisp
(setq tooltip-use-echo-area t)
#+END_SRC
*** Beep
Beep is frequent, irritating and not at all helpful. Send it to message screen instead of speakers so you still have some kind of visible cue that it happened.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function (lambda () (message "*beep*")))
#+END_SRC
** Customize rows and columns
*** C-l behavior
I found myself that I mostly use C-l to move position to top of the screen, so I usualy type C-l C-l. Why not customize it if it's repeating?
#+BEGIN_SRC emacs-lisp
(setq recenter-positions '(top middle bottom))
#+END_SRC
*** Cursor position
Show current row and column under the buffer. This is helpful and unobtrusive in most themes.
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
*** Wrap lines
Only scenario where you want text not to be wrapped is when looking source of some binary files. It's better to override behavior for those purposes, then to scroll buffer in left-right direction.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
*** Double space sentences
Let's ignore American typist's convention however much it be helpful in deducing end of the sentence. We will have tools for that in any place we need it.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Editing
*** Easy kill
I don't need to confirm or pick buffer when trying to kill it, just leave finger on Control and do it with `C-x C-k`.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+END_SRC
*** Paste
When typing over selected text, I want it to be replaced and not appended. 
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Undo Tree
Interesting and superior way of dealing with undo in Emacs. Takes some time to get used to, but ability to move through undo/redo tree is great when you get used to it.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode))

;; (use-package undo-tree
;;   :ensure t
;;   :diminish undo-tree-mode:
;;   :config (progn
;;             (global-undo-tree-mode 1)))
#+END_SRC
** OS-specific
For now, I only customized things related to OSX, because that's the system I'm spending most of my time. I plan to take some time these days to do fine tuning on few popular distros.
*** OSX
- Caps lock is bound to Control system-wide, not inside Emacs
- Option is Meta by default
- Left Cmd is Super by default
- Right Cmd is Control
- Killing and minimizing Emacs is supressed.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-q") nil)
  (global-set-key (kbd "s-w") nil)
  (global-set-key (kbd "C-~") nil)
  (setq mac-right-command-modifier 'control))
#+END_SRC
** Meta
Working with file `settings.org` is done so regularly to merit it's own key bindings.
*** Open
Speed dial `settings.org` with `C-c i`
#+BEGIN_SRC emacs-lisp
 (defun djole/find-settings ()
    "Edit settings.org"
    (interactive)
    (find-file (concat user-emacs-directory "settings.org")))
  (global-set-key (kbd "C-c i") 'djole/find-settings)
#+END_SRC
*** Reload
When we change settings.org, we want it quickly reloaded. Shortcut is `C-c r`.
#+BEGIN_SRC emacs-lisp
(defun djole/reload-settings ()
  "Reloads settings.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "settings.org" user-emacs-directory)))
(global-set-key (kbd "C-c r") 'djole/reload-settings)
#+END_SRC
* Theme
Theme deserves top-level entry, because it's highly personal and separate from most of the other settings. If you don't like my choice, there is lot's of sources out there so pick one that suits you. For now, I opted for `github` theme from `base16`. This will change often if history is any indicator but `github` is clean and I needed a change from dark themes.

[[https://belak.github.io/base16-emacs/][Available themes in base16]]
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :if window-system
  :config (load-theme 'base16-github t))
;; close candidates: 'base16-mexico-light 'base16-atelier-cave-light
#+END_SRC
* Org Mode
One of the biggest and most popular packages clearly gets described in separate top-level entry. There are so many ways it could be customized, but I try to minimize it and go with defaults as much as I can. I will soon enhance this section with templates and captures.
** General Layout
*** Indentation
I want everything indented to the level of it's title, but don't further indent code.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-edit-src-content-indentation 0)
#+END_SRC
*** Code highlights
Add colors to code using native mode for given language.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Code tabs
Tabs should behave in expected way when in code block, default is quite confusing.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC
*** Emphasized text
Emphasis are displayed immediately *(Bold*, /italic/)
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Special symbols
Symbols should be presented as intended (pi -> \pi{})
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC
*** Bullets
 [[https://github.com/sabof/org-bullets][org-bullets]] are presenting nice looking bullets instead of asterisks.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** Bindings
I still have some preferences when it comes to binding keys in `org-mode`...
*** Changing levels
- Promoting/Demoting with Super-left/righ
- Moving subtree with Super-up/down
- This leaves M-right/left to behave same as in other modes
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook          
          '(lambda ()
             (define-key org-mode-map (kbd "M-<right>") 'forward-word)
             (define-key org-mode-map (kbd "M-<left>") 'backward-word)
             (define-key org-mode-map (kbd "s-<up>") 'org-move-subtree-up)
             (define-key org-mode-map (kbd "s-<down>") 'org-move-subtree-down)
             (define-key org-mode-map (kbd "s-<right>") 'org-do-demote)
             (define-key org-mode-map (kbd "s-<left>") 'org-do-promote)))
#+END_SRC
*** Insert elisp template
Standard insert is done via `<s + TAB`, and I mostly need emacs-lisp, so I made `<el` template.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
*** Exporters
I tried with `pandoc-mode` but it looks too intrusive, and `ox-pandoc` has some problems installing from melpa stable, so I will leave this section to be updated in some later time. These days I don't have much use in creating pdf's or latex, so this can wait.
* Git
Version controll is important part of the Emacs ever since [[https://github.com/magit/magit][Magit]] entered the scene, showing factual difference between "porcelain" and "plumbing". After some time of adjusting practices, raising every day efficiency is inevitable with Magit and few of his helpers.
** Magit
Learn it, use it and never look back on days of typing something like: 
`git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit`
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC
** Git Gutter
[[https://github.com/syohex/emacs-git-gutter][git-gutter]] is displaying diff from last stage in left column (changed lines are presented as: "~", added: "+" and removed: "-").
One of the selling points for it is that every chunk can be separately staged. I set prefix for`git-gutter` commands to `M-g`.
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :config (progn
            (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
            (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
            (global-git-gutter-mode +1)
            (setq git-gutter:modified-sign "~")
            (setq git-gutter:added-sign "+")
            (setq git-gutter:deleted-sign "-")
            (setq git-gutter:window-width 3)
            (set-face-foreground 'git-gutter:modified "#b58900")
            (set-face-foreground 'git-gutter:added "#859900")
            (set-face-foreground 'git-gutter:deleted "#dc322f")
            (global-set-key (kbd "M-g s") 'git-gutter:stage-hunk)
            (global-set-key (kbd "M-g r") 'git-gutter:revert-hunk)
            (global-set-key (kbd "M-g m") #'git-gutter:mark-hunk)
            (global-set-key (kbd "M-g n") 'git-gutter:next-hunk)
            (global-set-key (kbd "M-g p") 'git-gutter:previous-hunk)
            ))
#+END_SRC
** Git Time Machine
[[https://github.com/pidu/git-timemachine][git-timemachine]] lets me go through previous commits in given file. It's not used often, but when it's needed it makes reverting files much easier.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine :ensure t)
#+END_SRC
* Programming
Common setup for all programming modes
#+BEGIN_SRC emacs-lisp
;;(add-hook 'prog-mode-hook 'linum-mode)
;; move through camel case
(subword-mode)
#+END_SRC
* Small side packages
** Which key
[[https://github.com/justbur/emacs-which-key][`which-key`]] opens popup after entering incomplete command. Delay of one second gives enough time to finish command without seeing it, and if I'm stuck it shows available endings to entered prefix.
#+BEGIN_SRC emacs-lisp
(use-package which-key 
  :ensure t
  :config
  (which-key-setup-side-window-right-bottom)
  (which-key-mode))
#+END_SRC
** Touch typing
Spare minutes are best spent on practicing some touch typing. Let's add few packages that can help with that.

*** `speed-type`
[[https://github.com/hagleitn/speed-type][speed-type]] takes practicing examples on random and it's sometimes very demanding with exotic examples that it puts in front of you.
#+BEGIN_SRC emacs-lisp
(use-package speed-type :ensure t)
#+END_SRC
*** typit
[[https://github.com/mrkkrp/typit][typit]] is convenient for building speed on common words.
#+BEGIN_SRC emacs-lisp
(use-package typit :ensure t)
#+END_SRC




