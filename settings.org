#+TITLE: Djole's Emacs Config
#+AUTHOR: Djordje Knezevic
#+EMAIL: djolereject@gmail.com
#+PROPERTY: header-args :results silent :tangle (expand-file-name "settings.el" config-dir)

* Intro

  Last Emacs bankruptcy forced me to try a different route. Put everything in org file and have it somewhat documented.

* Basic Layout

Just some common sense stuff, along with maximized screen for standalone app. 


#+BEGIN_SRC emacs-lisp
;; set cursor
(setq-default cursor-type 'bar)

;; remove welcome screen
(setq inhibit-startup-message t)

;; remove toolbar
(tool-bar-mode 0)

;; remove scroll bars
(scroll-bar-mode 0)

;; maximize emacs
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))

;; show y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; stop system beep
(setq ring-bell-function (lambda () (message "*beep*")))

;; remove splash screen
(setq inhibit-splash-screen t)

;; remove text in scratch buffer
(setq initial-scratch-message nil)

;; start with text-mode if no other mode is default
(setq initial-major-mode 'text-mode)

;; no gui tooltips
(setq tooltip-use-echo-area t)

;; linum mode just for programming
(add-hook 'prog-mode-hook 'linum-mode)

;; number mode always
(column-number-mode t)

;; C-l should start from top, not middle
(setq recenter-positions '(top middle bottom))

;; don't expect double space for end of sentence
(setq sentence-end-double-space nil)

;; move through camel case
(subword-mode)


#+END_SRC

* Meta

This file will be central for all emacs settings and needs to be opened fairly often.
Shortcut for opening settings.org is `C-c i`

#+BEGIN_SRC emacs-lisp
 (defun find-init ()
    "Edit settings.org"
    (interactive)
    (find-file (concat user-emacs-directory "settings.org")))
  (global-set-key (kbd "C-c i") 'find-init)
#+END_SRC

* Packages
** Sources

Packages are pulled from melpa, be very conservative about adding other repos. Having only one repo keeps things simple and neat, and I mostly don't need fancy, rare or bleeding edge packages.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** Install `use-package`

If `use-package` is not installed, get on with it.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+END_SRC

** Install `no-littering`

Make subdirectories in user's emacs directory, and save all tmp files there.
- `etc` is for autogenerated files that would end up cluttering init.el. Packages can put there everything after installation.
- `var` is for auto-save folder of emacs and all other packages that have temp backup.


#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :init (progn
            (setq no-littering-etc-directory config-dir)
            (setq no-littering-var-directory data-dir)
            :config (progn
                      (require 'no-littering)
                      (require 'recentf)
                      (add-to-list 'recentf-exclude no-littering-var-directory)
                      (add-to-list 'recentf-exclude no-littering-etc-directory)
                      (setq backup-directory-alist
                            `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
                      (setq auto-save-file-name-transforms
                            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
                      (setq custom-file (expand-file-name "custom.el" config-dir))
                      (when (file-exists-p custom-file)
                        (load custom-file)))))

#+END_SRC

* Customization
** org
 
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :commands org-bullets-mode
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

   
* Programming

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

That's it

