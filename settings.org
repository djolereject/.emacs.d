#+TITLE: Djole's Emacs Config
#+AUTHOR: Djordje Knezevic
#+EMAIL: djolereject@gmail.com
#+PROPERTY: header-args :results silent :tangle (expand-file-name "settings.el" config-dir)

* Intro

Last Emacs bankruptcy forced me to try a different route. Put everything in org file and have it somewhat documented.

* Settings

Settings are near the top because we want them evaluated even if some later error in source breaks compiling.

** Open
This file will be central for all emacs settings and needs to be opened fairly often. It's usefull to have it on speed dial, especially while setting up.

Shortcut for opening settings.org is `C-c i`

#+BEGIN_SRC emacs-lisp
 (defun djole/find-settings ()
    "Edit settings.org"
    (interactive)
    (find-file (concat user-emacs-directory "settings.org")))
  (global-set-key (kbd "C-c i") 'djole/find-settings)
#+END_SRC

** Reload
Sometimes we want to reload settings.org in order to review changes to emacs setup without closing it.

Shortcut for reloading settings.org is `C-c r`

#+BEGIN_SRC emacs-lisp
(defun djole/reload-settings ()
  "Reloads settings.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "settings.org" user-emacs-directory)))
(global-set-key (kbd "C-c r") 'djole/reload-settings)
#+END_SRC
** Insert elisp template

Standard insert is done via `<s + TAB`, and I mostly need emacs-lisp. Now <el inserts template predefined with `emacs-lisp`

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Initial Setup
Before we go on with customizing emacs it's essential to setup some prerequisites. Everything in this section is concerning setting up set-package and making sure we don't create clutter around with default settings.
** Sources

Packages are pulled from melpa stable, be conservative about adding other repos. Having only one repo keeps things simple and neat, and I mostly don't need fancy, rare or bleeding edge packages.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** TLS Setup

First of all, it's essential to setup TLS certificate, because Emacs is not handling that as it should. We can't use `use-package` for that because it's managed before *ANY* installation, including `use-package`.
For openssl to work, on OSX we need to install `libressl`, which is easiest to do via Homebrew: `brew install libressl`.

#+BEGIN_SRC emacs-lisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC

** Install `use-package`

If `use-package` is not installed, get on with it, it's vastly superior way of installing packages compared to any other technique of keeping your setup up to date (and I tried them all).

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+END_SRC

** Install `no-littering`

Make subdirectories in user's emacs directory, and save all tmp files there. This reduces clutter and helps with having one place to look in case of something missing.

- `config` is for autogenerated files that would end up cluttering init.el. Packages can put files there after installation. Predefined subdirectories are `backup` and `auto-save`.

- `data` is for auto-save folder of emacs and all other packages that have temp backup.


#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :init (progn
            (setq no-littering-etc-directory config-dir)
            (setq no-littering-var-directory data-dir)
            :config (progn
                      (require 'no-littering)
                      (require 'recentf)
                      (add-to-list 'recentf-exclude no-littering-var-directory)
                      (add-to-list 'recentf-exclude no-littering-etc-directory)
                      (setq backup-directory-alist
                            `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
                      (setq auto-save-file-name-transforms
                            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
                      (setq custom-file (expand-file-name "custom.el" config-dir))
                      (when (file-exists-p custom-file)
                        (load custom-file)))))

#+END_SRC

** Supress warnings

Some packages are sending unnecessary warnings and it's bothering me so this is just for my OCD. Default value for this variable is :warning.

#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :error)
#+END_SRC

* Basic Layout
Setup some common sense behavior.
** Set general defaults
*** Maximize Emacs
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

*** Cursor is "bar" by default (other options include: box, hollow, hbar, nil)
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

*** Start with text-mode if no other mode is default for file I'm opening
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'text-mode)
#+END_SRC
** Remove unnecessary things
*** Turn off decorations
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+END_SRC

*** Remove messages and screens suitable for beginners
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
#+END_SRC

*** Show y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** I never need GUI tooltips in Emacs
#+BEGIN_SRC emacs-lisp
(setq tooltip-use-echo-area t)
#+END_SRC

*** Beep is irritating, send it to message screen instead of speakers
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function (lambda () (message "*beep*")))
#+END_SRC
** Customize rows and columns
*** Show current cursor position in footer
#+BEGIN_SRC emacs-lisp
(setq recenter-positions '(top middle bottom))
#+END_SRC

*** I prefer first C-l moving to top instead of middle of screen
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Wrap lines in any mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC

*** Don't expect double space for end of sentence
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Stop unwanted behavior in OSX
- Caps lock is bound to Control system-wide
- Option is Meta by default
- Left Cmd is Super by default
- Right Cmd is Control
- Killing and minimizing Emacs is supressed.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-q") nil)
  (global-set-key (kbd "s-w") nil)
  (global-set-key (kbd "C-~") nil)
  (setq mac-right-command-modifier 'control))
#+END_SRC
* Setup Theme

For now, it's `github` theme from `base16`. This will change often if history is any indicator. `github` is clean and I needed a change from dark themes.
[[https://belak.github.io/base16-emacs/][Available themes in base16]]

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :if window-system
  :config (load-theme 'base16-github t))
;; close candidates: 'base16-mexico-light 'base16-atelier-cave-light
#+END_SRC

* Org Mode
** General Layout
*** I want everything indented to the level of it's title.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

*** Additional indentation for code is not needed
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

*** Code should be highlighted.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Tabs should behave in expected way when in code block.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

*** Special symbols should be presented as intended (pi -> \pi{})
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

*** Emphasized text is immediately displayed *(Bold*, /italic/)
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

*** Bullets instead of asterisks
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** Bindings
I have some preferences when it comes to binding keys in `org-mode`...
- Promoting/Demoting with Super-left/righ
- Moving subtree with Super-up/down
- This leaves M-right/left to behave as in other modes
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook          
          '(lambda ()
             (define-key org-mode-map (kbd "M-<right>") 'forward-word)
             (define-key org-mode-map (kbd "M-<left>") 'backward-word)
             (define-key org-mode-map (kbd "s-<up>") 'org-move-subtree-up)
             (define-key org-mode-map (kbd "s-<down>") 'org-move-subtree-down)
             (define-key org-mode-map (kbd "s-<right>") 'org-do-demote)
             (define-key org-mode-map (kbd "s-<left>") 'org-do-promote)))
#+END_SRC
* Git
** Magit
[[https://github.com/magit/magit][magit]] is complete "porcelan" for git with incomparable ease of use.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

** Git Gutter
[[https://github.com/syohex/emacs-git-gutter][git-gutter]] is displaying diff from last stage in left column (changed with "~", added with "+" and removed with "-").
One of the selling points for it is that every chunk can be separately staged. Prefix for commands in `git-gutter` is `M-g`.
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :config (progn
            (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
            (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
            (global-git-gutter-mode +1)
            (setq git-gutter:modified-sign "~")
            (setq git-gutter:added-sign "+")
            (setq git-gutter:deleted-sign "-")
            (setq git-gutter:window-width 3)
            (set-face-foreground 'git-gutter:modified "#b58900")
            (set-face-foreground 'git-gutter:added "#859900")
            (set-face-foreground 'git-gutter:deleted "#dc322f")
            (global-set-key (kbd "M-g s") 'git-gutter:stage-hunk)
            (global-set-key (kbd "M-g r") 'git-gutter:revert-hunk)
            (global-set-key (kbd "M-g m") #'git-gutter:mark-hunk)
            (global-set-key (kbd "M-g n") 'git-gutter:next-hunk)
            (global-set-key (kbd "M-g p") 'git-gutter:previous-hunk)
            ))
#+END_SRC
** Git Time Machine
[[https://github.com/pidu/git-timemachine][git-timemachine]] lets me to go through previous commits in given file. It's not used often, but when it's needed it makes reverting files easier.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine :ensure t)
#+END_SRC
* Customize Editing
** Undo Tree
Make undo open 
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode:
  :config (progn
            (global-undo-tree-mode 1)))
            ;(bind-key "C-." 'undo-tree-visualize)))
#+END_SRC
* Programming

Common setup for all programming modes
#+BEGIN_SRC emacs-lisp
;;(add-hook 'prog-mode-hook 'linum-mode)
;; move through camel case
(subword-mode)
#+END_SRC
* Small side packages
** Which key
[[https://github.com/justbur/emacs-which-key][`which-key`]] opens popup after entering incomplete command. Delay of one second gives enough time to finish command without seeing it, and if I'm stuck it shows available endings to entered prefix.
#+BEGIN_SRC emacs-lisp
(use-package which-key 
  :ensure t
  :config
  (which-key-setup-side-window-right-bottom)
  (which-key-mode))
#+END_SRC
** Touch typing

Spare minutes are best spent on practicing some touch typing. Let's add few packages that can help with that.

`speed-type` takes practicing examples on random and it's sometimes very demanding with rare words.
#+BEGIN_SRC emacs-lisp
(use-package speed-type :ensure t)
#+END_SRC

`typit` is convenient for building speed on common words.
#+BEGIN_SRC emacs-lisp
(use-package typit :ensure t)
#+END_SRC




