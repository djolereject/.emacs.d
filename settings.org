#+TITLE: Djole's Emacs Config
#+AUTHOR: Djordje Knezevic
#+EMAIL: djolereject@gmail.com
#+PROPERTY: header-args :results silent :tangle (expand-file-name "settings.el" config-dir)

* Intro

Last Emacs bankruptcy forced me to try a different route. Put everything in org file and have it somewhat documented.

* Settings

Settings are near the top because we want them evaluated even if some later error in source breaks compiling.

** Open
This file will be central for all emacs settings and needs to be opened fairly often. It's usefull to have it on speed dial, especially while setting up.

Shortcut for opening settings.org is `C-c i`

#+BEGIN_SRC emacs-lisp
 (defun djole/find-settings ()
    "Edit settings.org"
    (interactive)
    (find-file (concat user-emacs-directory "settings.org")))
  (global-set-key (kbd "C-c i") 'djole/find-settings)
#+END_SRC

** Reload
Sometimes we want to reload settings.org in order to review changes to emacs setup without closing it.

Shortcut for reloading settings.org is `C-c r`

#+BEGIN_SRC emacs-lisp
(defun djole/reload-settings ()
  "Reloads settings.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "settings.org" user-emacs-directory)))
(global-set-key (kbd "C-c r") 'djole/reload-settings)
#+END_SRC
** Insert elisp template

Standard insert is done via `<s + TAB`, and I mostly need emacs-lisp. Now <el inserts template predefined with `emacs-lisp`

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Initial Setup

Before we go on with customizing emacs it's essential to setup some prerequisites. Everything in this section is concerning setting up set-package and making sure we don't create clutter around with default settings.

** Sources

Packages are pulled from melpa stable, be conservative about adding other repos. Having only one repo keeps things simple and neat, and I mostly don't need fancy, rare or bleeding edge packages.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** Install `use-package`

If `use-package` is not installed, get on with it, it's vastly superior way of installing packages.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+END_SRC

** Install `no-littering`

Make subdirectories in user's emacs directory, and save all tmp files there. This reduces clutter and helps with having one place to look in case of something missing.

- `config` is for autogenerated files that would end up cluttering init.el. Packages can put files there after installation. Predefined subdirectories are `backup` and `auto-save`.

- `data` is for auto-save folder of emacs and all other packages that have temp backup.


#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t
    :init (progn
            (setq no-littering-etc-directory config-dir)
            (setq no-littering-var-directory data-dir)
            :config (progn
                      (require 'no-littering)
                      (require 'recentf)
                      (add-to-list 'recentf-exclude no-littering-var-directory)
                      (add-to-list 'recentf-exclude no-littering-etc-directory)
                      (setq backup-directory-alist
                            `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
                      (setq auto-save-file-name-transforms
                            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
                      (setq custom-file (expand-file-name "custom.el" config-dir))
                      (when (file-exists-p custom-file)
                        (load custom-file)))))

#+END_SRC

** Supress warnings

Some packages are sending unnecessary warnings and it's bothering me so this is just for my OCD. Default value for this variable is :warning.

#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :error)
#+END_SRC

* Basic Layout

Just some common sense stuff, along with maximized screen for standalone app. 


#+BEGIN_SRC emacs-lisp
;; set cursor
(setq-default cursor-type 'bar)

;; remove welcome screen
(setq inhibit-startup-message t)

;; remove toolbar
(tool-bar-mode 0)

;; remove scroll bars
(scroll-bar-mode 0)

;; maximize emacs
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))

;; show y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; stop system beep
(setq ring-bell-function (lambda () (message "*beep*")))

;; remove splash screen
(setq inhibit-splash-screen t)

;; remove text in scratch buffer
(setq initial-scratch-message nil)

;; start with text-mode if no other mode is default
(setq initial-major-mode 'text-mode)

;; no gui tooltips
(setq tooltip-use-echo-area t)

;; linum mode just for programming
(add-hook 'prog-mode-hook 'linum-mode)

;; number mode always
(column-number-mode t)

;; C-l should start from top, not middle
(setq recenter-positions '(top middle bottom))

;; don't expect double space for end of sentence
(setq sentence-end-double-space nil)

;; move through camel case
(subword-mode)


#+END_SRC

* Customize Packages

This is the place for installing and customizing general-purpose packages.

** theme

For now, it's `github` theme from `base16`. This will change often if history is any indicator. `github` is clean and I need a change from dark themes.
[[https://belak.github.io/base16-emacs/][Available themes in base16]]

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :if window-system
  :config (load-theme 'base16-github t))
;; close candidates: 'base16-mexico-light 'base16-atelier-cave-light
#+END_SRC

** org  
*** general layout

Setup `org-mode` with common sense layout.

I want everything indented to the level of it's title.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Additional indentation for code is not needed
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

Code should be highlighted.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Tabs should behave in expected way when in code block.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

Special symbols should be presented as intended (pi -> \pi{})
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Emphasized text is immediately displayed *(Bold*, /italic/)
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

*** `org-bullets`
Goal of `org-bullets` is simple - replace asterisk with nice looking bullets.

At the moment of writing this, `org-bullets` is having problems while installing from melpa stable and create warning about local variable `e`. First line is for suppressing this warning.

#+BEGIN_SRC emacs-lisp
(defvar e nil)
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

* Programming

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

That's it


