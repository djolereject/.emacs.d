#+TITLE: Djole's Emacs Config
#+AUTHOR: Djordje Knezevic
#+EMAIL: djolereject@gmail.com
#+PROPERTY: header-args :results silent

* About
Last Emacs bankruptcy forced me to try a different route - put everything in org file and have it documented, explained and never stale.

Explanations combined with code in one file is effectuating old paradigm of [[https://github.com/limist/literate-programming-examples][Literate Programming]], which might have its flaws but lisp configuration file is exactly where it shines. I will try not to underestimate "Literate" part of this concept and give thorough explanations for every line of code along with guiding principles for bigger sections.

This is obviously opinionated setup, being my actual working ~init~, but I made some effort making it modular so it's possible to pick any part of it separately. Reminding future me on what the hell I was thinking when I included something is part of the reason I'm writing this, but I also hope it can be of help to someone trying to learn how Emacs initialization works. I had tremendous help from other people's init directories and I hope detailed instructions presented here could help someone in similar fashion.

For somebody who is starting his journey with Emacs, this repository can serve as a starting point for personal setup. Just copying it will leave you with nice looking and reasonable settings. I have a tendency for minimalism so this should be easy to build upon. Similarly, separation of code blocks makes it trivial to remove parts that are of no interest in someone else's workflow.

If you find something achievable in simpler or more efficient way, please feel free to tell me. This is in no way finished and I don't expect it ever to be.

** Files in .emacs.d
*** README.org
This is where the magic happens... [[https://org-babel.readthedocs.io/en/latest/][Babel]] extracts code from this file copying it to self-created ~config/settings.el~ which Emacs uses for initialization. Using that extracted code ~Custom~ creates ~config/custom.el~ and lists packages mentioned, preparing them for download and installation.

- Source of all packages is [[https://melpa.org/packages][MELPA]], after I found out that [[https://stable.melpa.org/][MELPA Stable]] is not superior in any way. Emacs package sources are still evolving ecosystem and everything relies on your specific needs, but ~MELPA~ seem to be best choice for now.
- Strategy used for installation is [[https://github.com/jwiegley/use-package][use-package]], which to me looks superior to all other techniques (and I tried them all). Possibility to require and define package in the same place where you are setting its behavior does wonders for readability. Some packages might make you jump through hoops if you try to install them this way, but it's worth it.
*** init.el
In ~init~ we have to set some things beforehand so ~settings~ can run consistently between reboots and there is no clutter created in Emacs root directory.
- ~(package-initialize)~ is there just because ~Custom~ would put it there anyway being the starting file of initialization.
- ~config-dir~ and ~data-dir~ are names of directories that ~no-littering~ package uses for storing transient files which need to be created in the pre-processing stage.
* Prerequisites
Before we go on with installing packages it's essential to configure some things. Everything in this section concerns initializing ~set-package~ and making sure we don't create clutter in the init directory.
** Sources
Having only one source repository keeps things simple and I don't need fancy, rare or bleeding edge packages. I used to go with ~melpa-stable~, but since that time I learned that there is no advantage presumed with "stable" postfix in the name. I can always download packages and set local source for ~use-package~, making it even more secure if that becomes important.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC
** TLS Setup
Before installing anything, it's essential to setup TLS certificate because Emacs is not handling that in ideal way. For openssl to work on OSX we need to install ~libressl~, which is easiest to do via [[https://brew.sh/][Homebrew]]: ~brew install libressl~. Popular Linux distros have this predefined so there is no need for any setup and for other systems you should easily find equivalent ssl libraries.

#+BEGIN_SRC emacs-lisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC
** use-package
I already explained why I like ~use-package~ as my preferred installer. This setup could obviously work with some other macro, but discrepancies are probable.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+END_SRC

Now we can use ~use-package~ for ~use-package~!

#+BEGIN_SRC emacs-lisp
(use-package use-package
  :init
  (setq use-package-always-ensure t)	; Try installing automatically
  (setq use-package-verbose nil)		; Set to true when interested in load times
  (use-package use-package-ensure-system-package :ensure t)) ; Need this because we are in use-package config
#+END_SRC

** no-littering
[[https://github.com/emacscollective/no-littering][no-littering]] package is the first we are going to install. It's job is to make sub-directories in ~.init.d~ and save all temporary files there. This reduces clutter and helps with having one place to look in case that something is missing.
- ~/config~ is for auto generated files that would end up cluttering ~init.el~. Process of installation creates ~settings.el~ and ~custom.el~ files, but any package that needs configuration files should use this directory to save them.
- ~/data~ serves as temporary directory for all packages. This is place for ~auto-save~ and ~backup~, along with any other package that needs to save some transient data.

#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init (progn
            (setq no-littering-etc-directory config-dir)
            (setq no-littering-var-directory data-dir)
            :config (progn
                      (require 'no-littering)
                      (require 'recentf)
                      (add-to-list 'recentf-exclude no-littering-var-directory)
                      (add-to-list 'recentf-exclude no-littering-etc-directory)
                      (setq backup-directory-alist
                            `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
                      (setq auto-save-file-name-transforms
                            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
                      (setq custom-file (expand-file-name "custom.el" config-dir))
                      (when (file-exists-p custom-file)
                        (load custom-file)))))
#+END_SRC
** Suppress warnings
Some packages are sending unnecessary warnings while installed through ~use-package~ and it's bothering me, so this is just for quieter experience with installation. Default value for this variable is ~:warning~ and I boosted it up to ~:error~.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(cl-functions))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(setq warning-minimum-level :error)
#+END_SRC
* General Settings
In this section we are dealing with overall look and behavior of Emacs. Values and packages set here are the ones that will influence every mode in Emacs and it would be good for you to understand what they are doing. I tried to add links to repos or other pages of importance that can shine some light on what given package is trying to achieve.
** Set defaults
*** Maximize Emacs
GUI app should take as much screen real estate as possible.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC
*** Cursor appearance
I want text cursor looking like ~bar~ (other options include: ~box~, ~hollow~, ~hbar~, ~nil~). This is purely personal preference, play with it and find what works for you.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC
*** Default mode
Opening files with unknown extension is best to start in ~text-mode~ and specify later.

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'text-mode)
#+END_SRC
** Remove unwanted
*** Decorations
If you use Emacs without mouse there is not much need for toolbar, scrollbar or menu.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
(menu-bar-mode -1)
#+END_SRC
*** Messages
While these screens might be helpful for beginners when they start their journey with Emacs, after a while they become annoyances.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
#+END_SRC
*** Confirmation
Expect y/n instead of yes/no when needing confirmation - this really ought to be default.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Tooltips
I never need GUI tooltips in Emacs and can't imagine type of usage that welcomes it.

#+BEGIN_SRC emacs-lisp
(setq tooltip-use-echo-area t)
#+END_SRC
*** Sound Beep
Beep is frequent, irritating and not at all helpful. Send it to message screen instead of speakers so you still have some kind of visible cue that it happened.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function (lambda () (message "*beep*")))
#+END_SRC
** Buffer specific
*** Switching
After trying out different solutions, I'm most comfortable switching windows with ~Ctrl Tab~, probably because it's the default way of switching tabs in browsers so I can use the same mental mapping.

#+begin_src emacs-lisp
(global-set-key [C-S-tab] 'windmove-left) ; move to left window
(global-set-key [C-tab] 'windmove-right) ; move to right window
#+end_src

[[Https://github.com/abo-abo/ace-window][Ace-window]] brings some additional options for case when there are more windows.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "M-i") 'ace-swap-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
*** Clear
It might be personal quirk but most frequent use of ~C-l~ command for me is to move cursor position to top of the screen, so I usually type ~C-l C-l~. Whenever something is repeating, aim for simplification.

#+BEGIN_SRC emacs-lisp
(setq recenter-positions '(top middle bottom))
#+END_SRC
*** Cursor position
Show current row and column at the bottom of the buffer. This is helpful in most modes and unobtrusive in rest of them.

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
*** Wrap lines
Only case known to me where you would want unwrapped text is parsing binary files. It's better to override behavior for those purposes, then to scroll left-right through buffer in all other scenarios.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
*** Double space sentences
American typist's convention for end of the sentence can cause trouble in some modes. If you need it just turn on ~M-x repunctuate-sentences~.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Reverting buffers
When file edited in buffer changes from some outside source (say, ~git reset~), I expect buffer to render that change immediately.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
*** Visible go-to line
Jumping to line with ~goto-line~ can be more ergonomic if you have a preview of where that jump will land you.

#+begin_src emacs-lisp
(use-package goto-line-preview
  :config (global-set-key [remap goto-line] 'goto-line-preview)) ; replace goto-line globally
#+end_src
** Editing
*** Fast buffer kill
Confirming or picking exact buffer when trying to kill it wastes time, just leave finger on Control and do it faster with ~C-x C-k~.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+END_SRC
*** Pasting text
When typing over selected text, I want it replaced and not appended. One of the rare cases when Emacs is in the wrong compared to majority of editors.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Undo Tree
Interesting and efficient way of dealing with undo in Emacs. Takes some time to get used to, but ability to move through undo/redo tree can be great.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode))
#+END_SRC
*** Whitespaces
**** Whitespace shrink
Really simple package, but I find it incredibly useful. Replaces rows of whitespaces with just one or deletes single whitespace. Shortcut is ~M-Space~.

#+BEGIN_SRC emacs-lisp
(use-package shrink-whitespace
  :config (global-set-key (kbd "M-SPC") 'shrink-whitespace))
#+END_SRC

**** Whitespace cleanup
Removing whitespaces in buffer from the end of the lines introduced by you. This is convenient in messy codebases because it doesn't change other parts of the code.

#+begin_src emacs-lisp
(use-package ws-butler
  :config (ws-butler-global-mode 1))
#+end_src
*** Beacon
Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+begin_src emacs-lisp
(use-package beacon
  :config
  (setq beacon-blink-duration 0.3)
  (setq beacon-blink-delay 0.5)
  (beacon-mode 1))
#+end_src
*** Expand Region
[[https://github.com/magnars/expand-region.el][Expand]] or contract selected region by semantic units. Surprisingly usable for both code and text, with language-specific definitions of s-expressions.

#+begin_src emacs-lisp
(use-package expand-region
  :bind
  ("C->" . 'er/expand-region)
  ("C-<" . 'er/contract-region))
#+end_src
** OS-specific
For now, I only customized things related to OSX because that's the system I'm spending most of my time in. I plan to do fine tuning for Ubuntu also.

*** OSX
- Bound ~Control~ to ~Caps-Lock~ key system-wide, not inside Emacs. This is something I encourage everybody to try.
- ~Option~ is ~Meta~ by default, no need to do anything there.
- Left ~Cmd~ is ~Super~ by default, no need to do anything there.
- Right ~Cmd~ is ~Control~, it's the only key that makes sense for right hand.
- Suppress killing and minimizing Emacs with OS shortcuts.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-q") nil)
  (global-set-key (kbd "s-w") nil)
  (global-set-key (kbd "C-~") nil)
  (setq mac-right-command-modifier 'control))
#+END_SRC
** Minibuffer
There are lot of packages that are trying to influence all aspects of working with Emacs and consequentially change behavior of minibuffer. I tried working with ~Helm~, but in the end decided I don't need such an invasive package because I started spending time chasing it's quirks around some other big packages.

Another possible route is having just ~ido-mode~ and big number of specialized settings for different scenarios which also tends to become clutter after a while. 

For now, I settled with ~Ivy~ which is a little bit more "overall solution" than I'm comfortable with, but it keeps things confined.

*** Ivy, Counsel, Swiper
~Ivy~ is split into three packages - ~Ivy~, ~Swiper~ and ~Counsel~. Basic functionality of ~Ivy~ is to present list of options as completion mechanism. It's not strictly bound to minibuffer and it can manage various inputs. ~Swiper~ is enhancement for ~I-search~, and ~Counsel~ is collection of enhanced Emacs commands. By installing Counsel other two are brought as dependencies, but they all can be used separately.
I made lot of global keybindings for these packages because they are created to replace standard functions of Emacs and enhance them in some way. Good doc for learning about this package can be found [[https://github.com/abo-abo/swiper/blob/master/doc/ivy.org][here]] and comprehensive manual is [[http://oremacs.com/swiper/][here]].

#+begin_src emacs-lisp
(use-package counsel
  :config
  (ivy-mode 1) ; Use ivy-mode globally
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-height 20)
  :bind (
	 ;; Ivy bindings
	 ("C-x b" . ivy-switch-buffer)
	 ("C-c z" . ivy-resume)
	 ;; Swiper bindings
	 ("C-s" . swiper) ; replace I-search with swiper version
	 ("C-r" . swiper) ; replace backward I-search with swiper version
	 ("C-c u" . swiper-all) ; search in all opened buffers
	 ;; Counsel bindings
	 ("M-x" . counsel-M-x)
	 ("C-c g" . counsel-ag)
	 ("C-x l" . counsel-locate)
	 ("C-c m" . counsel-imenu)
   ("C-c o" . counsel-outline)
   ("C-c t" . counsel-load-theme)
	 ("C-x C-f" . counsel-find-file)
   ("C-x y" . counsel-find-library)
   ("C-x p" . counsel-list-processes)
   ("C-h f" . counsel-describe-function)
   ("C-h v" . counsel-describe-variable)
   ("C-h a" . counsel-apropos)
   ("C-h i" . counsel-info-lookup-symbol)
   ("C-h u" . counsel-unicode-char)
   ("C-h b" . counsel-descbinds) ; it hides `describe-bindings` from help.el
   ("C-h W" . woman) ; not part of counsel, but it belongs with these keybindings
	 ("C-M-y" . counsel-yank-pop)
   ))
#+end_src
*** Which key
[[https://github.com/justbur/emacs-which-key][which-key]] opens popup after entering incomplete command. Delay of one second gives enough time to finish command without seeing it, and if I'm stuck it shows available endings to entered prefix.

#+BEGIN_SRC emacs-lisp
(use-package which-key 
  :config
  (which-key-setup-minibuffer)
  (setq which-key-side-window-location 'bottom)
    ;;(which-key-setup-side-window-right-bottom)
  (which-key-mode))
#+END_SRC
** Meta
Emacs configuration is job that is never really finished so I added convenient shortcut to open ~README.org~ file from anywhere: ~C-c i~. When I'm inside ~README~, it tangles and reloads it again.

#+begin_src emacs-lisp
(defun djole/load-init ()
  "Open main README.org file or reload if it's opened."
  (interactive)
  (if (equal original-source buffer-file-name) ;; if: I'm already inside README.org
      (progn
	(org-babel-tangle-file original-source compiled-source) ;; do: recompile
	(load-file compiled-source)) ;; and: load again
    (find-file original-source))) ;; else: open README
(global-set-key (kbd "C-c i") 'djole/load-init) ;; Add global keybinding for this function
#+end_src
* Theme
Picking theme is personal for everybody so if you don't like my choice explore some resources out there and pick one that suits you. There are lot of repositories out there so you shouldn't limit yourself to ~base16~, [[https://belak.github.io/base16-emacs/][but they do have some variety.]]

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :if window-system
    :config (load-theme 'base16-oceanicnext t))
  ;; light candidates: 'base16-mexico-light 'base16-atelier-cave-light
  ;; dark candidates: 'base16-oceanicnext 'base16-materia 'base16-apathy 'base16-atelier-savanna 'base16-chalk 'base16-google-dark 'base16-gruvbox-dark-pale 
#+END_SRC
* Org Mode
Customizing one of the biggest and most popular packages for Emacs could be infinite job on itself, but I try to go with defaults as much as I can. 

!!! TODO: enhance this section with templates and captures.

** General Layout
*** Indentation
Indent everything to the level of its title, but skip further indentation of code.

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-edit-src-content-indentation 0)
#+END_SRC
*** Code highlights
Add some colors to the code using native mode for given language.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Code confirmation
I never accidentally type ~C-c C-c~ so there is no need for confirmation.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
*** Tabs in code
Tabs should behave in expected way when in code block, default is quite confusing.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC
*** Emphasized text
Display emphasis immediately: *Bold*, /italic/...

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Special symbols
Present symbols as intended (pi -> \pi{}).

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC
*** Bullets
 [[https://github.com/sabof/org-bullets][org-bullets]] are presenting nice looking bullets instead of asterisks.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** Bindings
While trying to be as close to defaults as possible, I still have some preferences when it comes to binding keys in ~org-mode~.
*** Changing levels
- Promoting/Demoting with Super-left/right
- Moving subtree with Super-up/down
- This leaves M-right/left to behave same as in other modes

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook          
          '(lambda ()
             (define-key org-mode-map (kbd "M-<right>") 'forward-word)
             (define-key org-mode-map (kbd "M-<left>") 'backward-word)
             (define-key org-mode-map (kbd "s-<up>") 'org-move-subtree-up)
             (define-key org-mode-map (kbd "s-<down>") 'org-move-subtree-down)
             (define-key org-mode-map (kbd "s-<right>") 'org-do-demote)
             (define-key org-mode-map (kbd "s-<left>") 'org-do-promote)
	     (define-key org-mode-map [C-tab] nil))) ;; used for windmove-right
#+END_SRC
*** Template for elisp code
Org mode 9.2 changed structure template expansion, preferred way now is to open popup with ~C-c C-,~ where you can pick template with one letter. I mostly use source with emacs-lisp, so I added it to he list under letter *p*.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("p" . "src emacs-lisp"))
#+END_SRC
** Appearance
Just one way for ~org-mode~ to look nice. I copied most of it from somewhere and added couple of things, but it's a matter of personal preference so feel free to play with it. One more important note is that layout settings are tightly related to theme you are using, so this section is something you will probably often fine tune.

#+BEGIN_SRC emacs-lisp :tangle no
(let*
      ((variable-tuple (cond
                        ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                        ((x-list-fonts "Verdana")         '(:font "Verdana"))
                        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
                            `(org-level-4 ((t (,@headline ,@variable-tuple))))
                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.33))))
                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.33))))
                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.33))))
                            `(org-document-title ((t (,@headline ,@variable-tuple :height 1.33 :underline nil))))))
#+END_SRC
** Exporters
I tried with ~pandoc-mode~ but it looks too intrusive, and ~ox-pandoc~ has some problems installing from ~melpa-stable~. Exporting to markdown is the only thing I need for now so I will return to this section when exporting to PDF or latex calls for more.

TODO: Needs more exporting options!

#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :after (org))
#+END_SRC

** Agenda
*** Global Shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-log-done t)
#+END_SRC
*** Files
Define default place for my agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list "~/org/agenda.org"))
#+END_SRC
* Git
Version control is important part of Emacs ever since [[https://github.com/magit/magit][Magit]] entered the scene showing factual difference between "porcelain" and "plumbing". After spending some time getting used to it, ~Magit~'s efficiency will look like magic to seasoned git user.

** Magit
Learn it, use it and never look back on days of typing something like: 
~git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit~

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config
  (add-to-list 'magit-no-confirm 'stage-all-changes) ; don't confirm staging all (S)
  (setq magit-save-repository-buffers 'dontask)) ; save related buffers when opening magit
#+END_SRC
** Git Time Machine
[[https://gitlab.com/pidu/git-timemachine][git-timemachine]] lets me browse through previous commits in given file. It's not used often, but reverting files can be touchy operation and this package presents differences in obvious way.
Using it is easy: ~M-x git-timemachine~ and move through historic revisions of file with ~p~ and ~n~.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC
** Git Forge
[[https://github.com/magit/forge][Forge]] is package used in conjunction with Magit and primarily used for connection with ~Github~, ~Gitlab~ or similar remotes (forges).

TODO: Make sure it is used and remove if not!

#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit)
#+END_SRC
** Ediff
I like ~ediff~ more than ~smerge~, but that's probably just a personal preference. Give it a try.

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
* Programming
** General settings
*** Line numbers
Show line numbers in any programming mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
*** Camel Case
Treat CamelCase as separate words while editing.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC
*** Company
"Complete Anything" or [[http://company-mode.github.io/][company]] is used to complete text at point of typing. Make it global and let other packages add appropriate backends.

#+BEGIN_SRC emacs-lisp
(use-package company
  :config (global-company-mode t))
#+END_SRC
*** Newline
#+BEGIN_SRC emacs-lisp
(setq require-final-newline nil)
(setq mode-require-final-newline nil)
#+END_SRC
*** Folding
I fought against using folding for my code because I feel that need for it is major red flag, but programmer's life is a hard one and I found myself working with company that believes in ruby methods with hundreds of lines of code. This package folds methods so you can see bigger picture.

#+begin_src emacs-lisp
(use-package yafolding
  :config
  (add-hook 'prog-mode-hook 'yafolding-mode)
  (global-set-key (kbd "C-c y") 'yafolding-discover))
#+end_src
** Ruby
Ensure ~ruby-mode~ is major mode for all ruby-related files.

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode
  "\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'"
  "\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'"
  :config (setq ruby-insert-encoding-magic-comment nil)) ;; don't add coding comment on save
#+END_SRC

*** REPL
Common library for opening REPL inside Emacs is [[https://github.com/nonsequitur/inf-ruby/][inf-ruby]], make it available for all ruby files.

#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
  :init (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  :bind 
  ("C-c q" . 'ruby-send-buffer)
  ("C-c C-q" . 'ruby-send-buffer-and-go))
#+END_SRC

Use [[https://github.com/dgutov/robe][Robe]] with ~ruby-mode~, attach it to ~inf-ruby~ subprocess to show info about loaded methods. After configuring robe and company, add company-robe to the list of its backends.

#+BEGIN_SRC emacs-lisp
(use-package robe
  :init (add-hook 'ruby-mode-hook 'robe-mode)
  :bind ("C-M-." . robe-jump)
  :config (eval-after-load 'company '(push 'company-robe company-backends)))
#+END_SRC
*** Refactoring
[[https://github.com/rejeep/ruby-tools.el][Ruby tools]] brings few refactoring options. I'm still not sure is it worth to include separate package but I'm trying it out.

TODO: Make sure that I'm using Ruby tools or remove it

#+BEGIN_SRC emacs-lisp
(use-package ruby-tools
  :init (add-hook 'ruby-mode-hook 'ruby-tools-mode))
#+END_SRC
*** RSpec
Minor mode for specs [[https://github.com/pezra/rspec-mode][rspec-mode]] is a great productivity booster when setup correctly. I don't find default ~C-c ,~ binding convenient in given workflow, so I applied some faster bindings just for this mode.
Various variables are moved in ~:config~ part of the setup for clarity.

#+BEGIN_SRC emacs-lisp
(use-package rspec-mode
  :config
  ;; lot of repeating for keybindings, but kept like this for clarity
  (define-key rspec-mode-map (kbd "C-q a") 'rspec-verify-all)
  (define-key rspec-mode-map (kbd "C-q b") 'rspec-verify-matching)
  (define-key rspec-mode-map (kbd "C-q q") 'rspec-verify-single)
  (define-key rspec-mode-map (kbd "C-c C-c") 'rspec-verify-single)
  (define-key rspec-mode-map (kbd "C-q f") 'rspec-run-last-failed)
  (define-key rspec-mode-map (kbd "C-q r") 'rspec-rerun)
  (setq rspec-use-rake-when-possible nil) ; when rake is available use it.
  (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter); make RSpec get into editing mode on pry.
  (setq compilation-scroll-output 'first-error) ; scroll to the first test failure
  (setq compilation-ask-about-save nil) ; don't ask for confirmation of save when compiling
  (setq compilation-always-kill t)) ; don't ask for confirmation when killing compilation
#+END_SRC
*** Rubocop
[[https://github.com/bbatsov/rubocop][Rubocop]] is a static code analyzer, enforcing good practices in coding. After you install rubocop gem (~gem install rubocop~) you can add [[https://github.com/bbatsov/rubocop-emacs][rubocop-emacs]] to integrate it with Emacs.

#+BEGIN_SRC emacs-lisp
(use-package rubocop
  :init (add-hook 'ruby-mode-hook 'rubocop-mode))
#+END_SRC
*** Rails
Part of [[https://github.com/bbatsov/projectile][projectile]], [[https://github.com/asok/projectile-rails][projectile-rails]] helps navigating Rails projects. I added couple of handy keybindings that utilize ~Super~ key along with ~Control~.

#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
  :config (projectile-rails-global-mode)
  (setq projectile-completion-system 'ivy)
  (define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map)
  (define-key projectile-rails-mode-map (kbd "C-s-m") 'projectile-rails-find-model)
  (define-key projectile-rails-mode-map (kbd "C-s-v") 'projectile-rails-find-view)
  (define-key projectile-rails-mode-map (kbd "C-s-c") 'projectile-rails-find-controller)
  (define-key projectile-rails-mode-map (kbd "C-s-s") 'projectile-rails-find-spec)
  (define-key projectile-rails-mode-map (kbd "C-s-l") 'projectile-rails-find-lib)
  (define-key projectile-rails-mode-map (kbd "C-s-p") 'projectile-rails-find-current-spec)
  (define-key projectile-rails-mode-map (kbd "C-s-<return>") 'projectile-rails-goto-file-at-point))
#+END_SRC
** Web
*** HTML and CSS
Use ~web-mode~ for html, erb and various stylesheet files, indent by 2 spaces.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.erb\\'" ".html?\\'" ".s?css\\'" ".sass\\'")
  :config (setq web-mode-markup-indent-offset 2))
#+END_SRC

Use separate mode for slim files, because ~web-mode~ doesn't indent as it should. I'm still not happy with the mode but can't find anything better for now.

#+BEGIN_SRC emacs-lisp
(use-package slim-mode
  :mode ("\\.slim\\'"))
#+END_SRC
*** JavaScript
I tried ~js2~ mode, but upgraded it with [[https://github.com/felipeochoa/rjsx-mode/][rjsx-mode]] which is derived from it. It's far from perfect, but such is the state of fast moving front-end standards and old editors.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode ("\\.jsx\\'" ".js\\'")
  :config
  (setq js-indent-level 2)
  (setq js2-strict-missing-semi-warning t)
  (define-key rjsx-mode-map "<" nil)
  (define-key rjsx-mode-map (kbd "C-d") nil)
  (define-key rjsx-mode-map ">" nil))
#+END_SRC

~Vue~ files are opened with [[https://github.com/AdamNiederer/vue-mode][vue-mode]].
#+begin_src emacs-lisp
(use-package vue-mode
  :config (setq mmm-submode-decoration-level 0)) ;; 0, 1, or 2 == none, low, and high coloring
#+end_src
** REST
[[https://github.com/pashky/restclient.el][Restclient]] is used in place of Postman or Insomnia. Versatile package, but it takes some practice to get used to it.

#+BEGIN_SRC emacs-lisp
(use-package restclient
    :mode (("\\.http\\'" . restclient-mode))
    :bind (:map restclient-mode-map
                ("C-c C-f" . json-mode-beautify)))
#+END_SRC
** Markup
Installing modes for various markup languages.

*** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\(\\.\\(yaml\\|yml\\)\\)\\'")
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode 
  :init (setq-default markdown-hide-markup t))
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC
** Redis
Use [[https://github.com/justinhj/eredis][eredis]] for connecting to Redis server.

#+BEGIN_SRC emacs-lisp
(use-package eredis)
#+END_SRC
* File System
** Wgrep
Every search reasult or file list can be conveyed into ~grep buffer~ which can be edited with [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]], effectively giving you power of ~sed~ in Emacs.

#+begin_src emacs-lisp
(use-package wgrep)
#+end_src
** Ansible
Small package for helping with ansible files, especially with encryption of buffers.

#+begin_src emacs-lisp
(use-package ansible
  :config (add-hook 'yaml-mode-hook 'ansible))
#+end_src
* Zettelkasten
TODO: Explain zettelkasten basics.

Zetteldeft relies on [[https://jblevins.org/projects/deft][deft]], package that improves working with large number of small files.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :custom
    (deft-extensions '("org" "md" "txt"))
    (deft-directory "~/org/zettelkasten/")
    (deft-use-filename-as-title t))
#+END_SRC

[[https://github.com/EFLS/zetteldeft][Zetteldeft]] looks like the most advanced package for Zettelkasten on Emacs.

#+BEGIN_SRC emacs-lisp
(use-package zetteldeft
  :after deft
  :config
  (zetteldeft-set-classic-keybindings)
  (setq zetteldeft-title-suffix "\n#+TAGS #"))
#+END_SRC
* Writing
English is not my native language so I need more help than some. I still try to keep spellcheck unobtrusive and grammar or style suggestions on minimum so this setting could just be starting point for someone who needs more substantial suggestions or is writing more in natural than programming languages.

*** fly-spell
[[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] is wrapper for ~flyspell~ with interface that can easily work with ~ivy~, ~helm~ or simple popup presentation. 
~Fly-spell~ uses separate program to compare words, on Mac it's easiest to install ~aspell~ which comes with it's own dictionaries.
Other option is [[https://github.com/hunspell/hunspell][hunspell]], but it's harder for setup because you have to manually put dictionaries in path. Tutorial for usage is available on it's homepage and you should make sure that you have dictionaries for preferred languages by running ~hunspell -D~ in console, and make sure that one of them is labeled "default". More explanation about setting Hunspell to work with Emacs can be found [[https://stackoverflow.com/a/25431519/8699938][here]].
I hooked text and org mode with ~flyspell-mode~, binding correction to ~C-;~.

#+begin_src emacs-lisp
(use-package flyspell-correct-popup ; Seems more convenient than `flyspell-correct-ivy` that I used for a long time
  :after flyspell
  :config
  (setq ispell-program-name (executable-find "hunspell"))
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (define-key flyspell-mode-map (kbd "C-;") #'flyspell-correct-wrapper))
#+end_src
*** guess-language
For those who frequently use more than one language, it's convenient to have that language automatically recognized without need for some headers in files. [[https://github.com/tmalsburg/guess-language.el][guess-language]] does exactly that and can work even in files where languages are mixed. You just put cursor on wanted paragraph and run ~guess-language~.
I hooked it with flyspell-mode because I use it for switching dictionaries which seems like common usage. My dictionaries obviously will not work for everyone, but it's fairly easy to change them. Just make sure that names are the same as dictionaries available to `ispell-program-mode` you picked in `fly-spell` section. For example, Hunspell uses ~en_US~ as a name for dictionary, so you have to connect language ~en~ to it.

#+begin_src emacs-lisp
(use-package guess-language
  :after flyspell-correct
  :config
  (add-hook 'flyspell-mode-hook 'guess-language-mode)
  (setq guess-language-languages '(en sr sr_LAT))
  (setq guess-language-langcodes
	'((en . ("en_US" "English")) (sr . ("sr" "Српски")) (sr_LAT . ("sr_LAT" "Srpski")))))
#+end_src

*** writegood-mode
[[https://github.com/bnbeckwith/writegood-mode][writegood-mode]] is checking for weasel words, passive voice or duplicates in prose.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :init (global-set-key (kbd "C-c w") 'writegood-mode))
#+END_SRC
* Reading
** RSS
*** elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is the de facto standard for reading RSS feeds. It's globally bound to ~C-c f~, because I primarily read my feeds like this. Most of the specific settings for ~elfeed~ are moved to the next heading where I use ~elfeed-org~. Elfeed saves database in the `~/.emacs.d/data/elfeed` directory which you can delete if you want to start over.

#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-c f" . elfeed))
#+end_src

*** elfeed-org
I use [[https://github.com/remyhonig/elfeed-org][elfeed-org]] mostly to load my feeds from the org file. If you choose to do the same thing, make sure to change path to your file and to tag root node in it with ~:elfeed:~.

#+begin_src emacs-lisp
(use-package elfeed-org
  :after elfeed
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
  (setq elfeed-org-tree-id "elfeed"))
#+end_src

*** elfeed-goodies
Some shortcuts from [[https://github.com/algernon/elfeed-goodies][elfeed-goodies]] are conveniet for presentation of the feeds. I mostly use `p` and `n` inside the pane for going to previous and next article.

#+begin_src emacs-lisp
(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'top)
  (setq elfeed-show-entry-switch 'switch-to-buffer))
#+end_src
** Focus
[[https://github.com/larstvei/Focus][Focus]] can be useful for increasing visibility of smaller part of the buffer. Active ~thing~ can be word, paragraph, s-expression... and rest of the text in the buffer gets dimmed to highlight region of interest.
It's not turned on by default because it can get in the way when reading is the main activity in the buffer.

#+begin_src emacs-lisp
(use-package focus
:config (define-key focus-mode-map (kbd "C-c f") 'focus-change-thing)) ; override global elfeed keybinding
#+end_src
* Small side packages
** Touch typing
Spare minutes are best spent on practicing some touch typing and I added some packages that can be helpful.

*** speed-type
[[https://github.com/hagleitn/speed-type][speed-type]] takes practicing examples on random which sometimes can be demanding with exotic examples that it puts in front of you.

#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC
*** typit
[[https://github.com/mrkkrp/typit][typit]] is convenient for building speed on common words.

#+BEGIN_SRC emacs-lisp
(use-package typit)
#+END_SRC
** Search 
It's possible to search Stack Overflow from Emacs with one simple command. Results are stored in org buffer which makes it super-convenient.

TODO: See if I ever use this and remove if not.

#+BEGIN_SRC emacs-lisp
(use-package sos)
#+END_SRC
